let typeAttributes;
export const getTypeAttributes = () => typeAttributes;
export function polyfilledTypes(viewTransition, proxied) {
    if (!proxied)
        return viewTransition;
    const classList = document.documentElement.classList;
    let types = undefined;
    const typeAttr = 'vtbag-vtt-0'; // for :active-view-transition, postcss-active-view-transition-type
    classList.add(typeAttr);
    typeAttributes = new Set([typeAttr]);
    return new Proxy(viewTransition, {
        get(target, prop) {
            if (prop === 'types') {
                return (types ??= new Proxy(target.types ?? new Set(), {
                    get(typesTarget, typesProp) {
                        if (typesProp === 'add') {
                            return (value) => {
                                typesTarget.add(value);
                                const typeAttr = 'vtbag-vtt-' + value;
                                typeAttributes.add(typeAttr);
                                classList.add(typeAttr);
                            };
                        }
                        else if (typesProp === 'delete') {
                            return (value) => {
                                typesTarget.delete(value);
                                classList.remove('vtbag-vtt-' + value);
                            };
                        }
                        else if (typesProp === 'clear') {
                            return () => {
                                typesTarget.forEach((value) => classList.remove('vtbag-vtt-' + value));
                                typesTarget.clear();
                            };
                        }
                        else if (typesProp === 'has') {
                            return (value) => typeAttributes.has(value);
                        }
                        else if (typesProp === Symbol.iterator) {
                            return () => typesTarget[Symbol.iterator]();
                        }
                        return typesTarget[typesProp];
                    },
                }));
            }
            return target[prop];
        },
    });
}
